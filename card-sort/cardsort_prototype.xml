<?xml version="1.0" encoding="UTF-8"?>
<quiz>
<!-- question: 596485  -->
  <question type="coderunner">
    <name>
      <text>PROTOTYPE_cardsort</text>
    </name>
    <questiontext format="html">
      <text><![CDATA[Card sort]]></text>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1</defaultgrade>
    <penalty>0</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <coderunnertype>cardsort</coderunnertype>
    <prototypetype>2</prototypetype>
    <allornothing>1</allornothing>
    <penaltyregime>0</penaltyregime>
    <precheck>0</precheck>
    <hidecheck>0</hidecheck>
    <showsource>0</showsource>
    <answerboxlines>5</answerboxlines>
    <answerboxcolumns>100</answerboxcolumns>
    <answerpreload><![CDATA[{"cardsort":[{"groups":[{"title":"Group A","cards":[{"prompt":"This is a card with some text\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines","preformatted":true},{"prompt":"The young woman at the next table is wearing a long purple dress, and I consider inviting her to join me for lunch. This invitation will surely be declined, nor would I be tempted to extend it under any other circumstances. But the intensity and saturation of that purple make her a public figure, in spite of her obvious self-absorption.","preformatted":false},{"prompt":"size = 7\nsize //= 2\nfor i in range(-size, size + 1):\n    for j in range(-size, size + 1):\n        if abs(i) == abs(j) or i == 0 or j == 0:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()","preformatted":true},{"prompt":"Another card!","preformatted":true},{"prompt":"More cards\n\nWith text!","preformatted":false},{"prompt":"fghdjghjgf","preformatted":true},{"prompt":"abc","preformatted":true},{"prompt":"rgjkldhl","preformatted":true}]},{"title":"Group B","cards":[]},{"title":"Group C","cards":[]},{"title":"Group D","cards":[]},{"title":"Group E","cards":[]}],"config":{"groupOrder":true,"groupWidth":"41"}}]}]]></answerpreload>
    <globalextra></globalextra>
    <useace>1</useace>
    <resultcolumns></resultcolumns>
    <template><![CDATA[import json
import math
import sys
from collections.abc import Mapping
from pprint import pformat

from munkres import Munkres, make_cost_matrix


def dump_output_and_quit(mark: float, epilogue: str, exit_code: int = 0):
    outcome = {
        'fraction': mark,
        'testresults': [],
        'epiloguehtml': epilogue,
        'columnformats': [],
        'showdifferences': False
    }
    print(json.dumps(outcome))
    sys.exit(exit_code)


def prompt_set(group):
    """{"cards": [{"prompt": "prompt", ...}, ...] -> {"prompt", ...}}"""
    return {card["prompt"] for card in group["cards"]}


def title_map(groups):
    """
    [{"title": "title", "cards": [{"prompt": "prompt", ...}, ...]}, ...]
    -> {"title": {"prompt", ...}}
    """
    group_map = {}
    for group in groups:
        title = group["title"]
        cards = prompt_set(group)
        group_map[title] = cards
    return group_map


def edit_distance_ordered(student_groups, answer_groups):
    answer = title_map(answer_groups)
    student = title_map(student_groups)
    if len(answer_groups) != len(answer) or len(student_groups) != len(student):
        raise ValueError("Groups cannot have duplicate titles if order matters")
    distance = 0
    for title, cards in answer.items():
        student_cards = student[title]
        distance += len(cards - student_cards)
    return distance


def edit_distance_unordered(student_groups, answer_groups):
    """
    Returns the edit distance between two Sorts using the method described by
    Deibel et al.

    **See:** Deibel, K., Anderson, R., & Anderson, R. (2005). Using edit
    distance to analyze card sorts. Expert Systems, 22(3), 129-138.
    """
    sort1 = [prompt_set(group) for group in answer_groups]
    sort2 = [prompt_set(group) for group in student_groups]

    matching_weights = [[] for _ in range(len(sort1))]
    for i, group1 in enumerate(sort1):
        for group2 in sort2:
            intersection = len(group1 & group2)
            matching_weights[i].append(intersection)

    cost_matrix = make_cost_matrix(matching_weights)

    running_sum = 0
    for row, col in Munkres().compute(cost_matrix):
        running_sum += matching_weights[row][col]

    return len([c for group in sort1 for c in group]) - running_sum


def parse(data: str) -> Mapping:
    """
    data is of the form::
        {
            "cardsort": [{
                "groups": [
                    {"title": "...",
                     "cards": [{"prompt": "...", "preformatted": true/false}]},
                ],
                "config": {"groupOrder": true/false}
            }]
        }

    where "cardsort" only contains one item
    """
    return json.loads(data)["cardsort"][0]


def remove_unsorted_cards(groups):
    """Removes any group named "cards" (case-insensitive)"""
    return [group for group in groups if group["title"].lower() != "cards"]


def pluralise(count, singular, plural):
    return singular if count == 1 else plural


def main():
    student_answer = parse("""{{ STUDENT_ANSWER | e('py') }}""")
    question_answer = parse("""{{ QUESTION.answer | e('py') }}""")
    question_preload = parse("""{{ QUESTION.answerpreload | e('py') }}""")

    is_ordered = question_answer["config"]["groupOrder"]

    if is_ordered:
        # I think I can just replace this with the number of cards
        # but have not done the math
        student_groups = student_answer["groups"]
        answer_groups = question_answer["groups"]
        preload_groups = question_preload["groups"]
        max_distance = edit_distance_ordered(preload_groups, answer_groups)
        distance = edit_distance_ordered(student_groups, answer_groups)
    else:
        student_groups = remove_unsorted_cards(student_answer["groups"])
        answer_groups = question_answer["groups"]
        preload_groups = remove_unsorted_cards(question_preload["groups"])
        max_distance = edit_distance_unordered(preload_groups, answer_groups)
        distance = edit_distance_unordered(student_groups, answer_groups)

    scaled_dist = max(0.0, 1 - (distance / max_distance))

    if math.isclose(scaled_dist, 1.0):
        feedback = "<h3>Correct</h3>"
    else:
        cards = pluralise(distance, "card", "cards")
        are = pluralise(distance, "is", "are")
        feedback = "\n".join((
            "<h3>Incorrect</h3>",
            f"<p>{distance} {cards} {are} out of place.</p>"
        ))

    # feedback = f"""
    # <p>Distance: {distance}</p>
    # <p>Max Distance: {max_distance}</p>
    # <p>Scaled Distance: {scaled_dist:.2f}</p>
    #
    # <h3>This Submission:</h3>
    # <pre>{pformat(student_answer)}</pre>
    #
    # <h3>Question Answer:</h3>
    # <pre>{pformat(question_answer)}</pre>
    # """

    dump_output_and_quit(scaled_dist, feedback)


main()
]]></template>
    <iscombinatortemplate>1</iscombinatortemplate>
    <allowmultiplestdins>0</allowmultiplestdins>
    <answer><![CDATA[{"cardsort":[{"groups":[{"title":"Group A","cards":[{"prompt":"The young woman at the next table is wearing a long purple dress, and I consider inviting her to join me for lunch. This invitation will surely be declined, nor would I be tempted to extend it under any other circumstances. But the intensity and saturation of that purple make her a public figure, in spite of her obvious self-absorption.","preformatted":false},{"prompt":"abc","preformatted":true},{"prompt":"rgjkldhl","preformatted":true},{"prompt":"This is a card with some text\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines\n\nOver multiple lines","preformatted":true},{"prompt":"size = 7\nsize //= 2\nfor i in range(-size, size + 1):\n    for j in range(-size, size + 1):\n        if abs(i) == abs(j) or i == 0 or j == 0:\n            print('*', end='')\n        else:\n            print(' ', end='')\n    print()","preformatted":true},{"prompt":"Another card!","preformatted":true},{"prompt":"More cards\n\nWith text!","preformatted":false},{"prompt":"fghdjghjgf","preformatted":true}]},{"title":"Group B","cards":[]},{"title":"Group C","cards":[]},{"title":"Group D","cards":[]},{"title":"Group E","cards":[]}],"config":{"groupOrder":true,"groupWidth":"41"}}]}]]></answer>
    <validateonsave>0</validateonsave>
    <testsplitterre><![CDATA[|#<ab@17943918#@>#\n|ms]]></testsplitterre>
    <language>python3</language>
    <acelang></acelang>
    <sandbox></sandbox>
    <grader>TemplateGrader</grader>
    <cputimelimitsecs></cputimelimitsecs>
    <memlimitmb></memlimitmb>
    <sandboxparams></sandboxparams>
    <templateparams></templateparams>
    <hoisttemplateparams>1</hoisttemplateparams>
    <templateparamslang>None</templateparamslang>
    <templateparamsevalpertry>0</templateparamsevalpertry>
    <templateparamsevald>{}</templateparamsevald>
    <twigall>0</twigall>
    <uiplugin>html</uiplugin>
    <uiparameters><![CDATA[{"html_src": "prototypeextra"}]]></uiparameters>
    <attachments>0</attachments>
    <attachmentsrequired>0</attachmentsrequired>
    <maxfilesize>10240</maxfilesize>
    <filenamesregex></filenamesregex>
    <filenamesexplain></filenamesexplain>
    <displayfeedback>1</displayfeedback>
    <giveupallowed>0</giveupallowed>
    <prototypeextra><![CDATA[<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Card Sort Question</title>
  <style>
    :root {
      --CR-top-bar-colour: #5985a1;
      --CR-group-colour: #b2d5eb;
      --CR-background-colour: #fbf7f4;
      --CR-sortable-colour: rgba(255, 255, 255, 0.6);
    }

    .ui-sortable-helper * {
      z-index: 2 !important;
    }

    .qtype-coderunner-html-outer-div {
      height: 100% !important;
      min-height: 100% !important;
    }

    div[id$="answer_wrapper"].ui_wrapper,
    div[id$="answerpreload_wrapper"].ui_wrapper {
      min-height: 750px !important;
      height: 750px;
    }

    .CR-answerbox {
      /* flex is applied to the active answerbox */
      height: 100%;
      background-color: white;
      box-sizing: border-box;
      flex-direction: column;
      position: relative;
    }

    .CR-top-bar {
      display: flex;
      gap: 1rem;
      flex-direction: row-reverse;
      background-color: var(--CR-top-bar-colour);
      align-items: center;
      padding: 0 0.5rem;
      height: 2.6rem;
    }

    .CR-content {
      flex-grow: 1;
      position: relative;
      height: calc(100% - 2.6rem);
    }

    .CR-content .CR-left-shadow,
    .CR-content .CR-right-shadow {
      content: "";
      pointer-events: none;

      position: absolute;
      left: 0;
      top: 0;
      right: 0;
      bottom: 0;

      z-index: 1;
    }

    .CR-answerbox textarea {
      line-height: 1.2;
    }

    .CR-group-header-bar input {
      width: 100%;
    }

    .CR-add-card {
      min-width: 9ch;
    }

    .CR-group-container {
      height: 100%;
      overflow: auto;
      display: flex;
      flex-direction: column;
      position: relative;
      background-color: var(--CR-background-colour);
    }

    .CR-visible-groups-box {
      position: absolute;
      left: 0;
      top: 0;
      right: 0;
      bottom: 0;
      pointer-events: none;
    }

    .CR-groups {
      width: fit-content;
      display: flex;
      gap: 1rem;
      flex-grow: 1;
    }

    .CR-groups > :first-child {
      position: sticky;
      left: 0;
      margin: 0;
      border-radius: 0;
      padding-top: 1rem;
      z-index: 2;
    }

    .CR-group {
      border-radius: 0.25rem;
      padding: 0.5rem;
      display: flex;
      flex-direction: column;
      background-color: var(--CR-group-colour);
      margin-top: 0.5rem;
      margin-bottom: 0.5rem;
    }

    .CR-group-card-container {
      flex-grow: 1;
      /*overflow: auto;*/
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      border-radius: 0.25rem;
      padding: 0.3rem;
      height: 100%;
      background-color: var(--CR-sortable-colour);
      position: relative;
    }

    .CR-group-header-bar {
      display: flex;
      flex-direction: row;
    }

    .CR-group-header-bar input {
      flex-grow: 1;
    }

    .CR-card {
      padding: 0.25rem;
      border-radius: 0.25rem;
      background-color: white;
      border: 1px solid black;
      cursor: grab;
      position: relative;
    }

    .CR-card-buttons {
      display: flex;
      gap: 0.5rem;
    }

    .CR-preformat-checkbox-group,
    .CR-group-order-checkbox-group,
    .CR-group-width-input-group {
      border: 1px solid black;
      display: flex;
      padding: 0 0.25rem;
      gap: 0.5rem;
    }

    .CR-group-width-input-group input {
      width: 8ch;
    }

    .CR-prompt {
      margin: 0;
      font-size: 0.95rem;
    }

    p.CR-prompt {
      white-space: pre-wrap;
    }

    .CR-preload-warning p {
      margin: 0.2rem;
      text-align: center;
      font-weight: bold;
    }


    .CR-cardsort-fullscreen-button {
      background-color: white;
      border: 1px solid black;
      border-radius: 0.2rem;
      padding: 0.2rem 1rem;
    }
  </style>
</head>
<body>

<div id="CR-student-answer-___textareaId___" class="CR-answerbox" style="display: none">
  <div class="CR-top-bar">
    <button class="CR-cardsort-fullscreen-button">Fullscreen</button>
    <button class="CR-add-group-button">Add Group</button>
  </div>
  <div class="CR-content">
    <div class="CR-left-shadow"></div>
    <div class="CR-right-shadow"></div>
    <div class="CR-group-container">
      <div class="CR-visible-groups-box"></div>
      <div class="CR-groups"></div>
    </div>
  </div>
</div>

<div id="CR-answer-authoring-___textareaId___" class="CR-answerbox" style="display: none">
  <div class="CR-top-bar">
    <h3>Answer</h3>
    <button class="CR-cardsort-fullscreen-button">Fullscreen</button>
    <button class="CR-add-group-button">Add Group</button>
  </div>
  <div class="CR-content">
    <div class="CR-left-shadow"></div>
    <div class="CR-right-shadow"></div>
    <div class="CR-group-container">
      <div class="CR-visible-groups-box"></div>
      <div class="CR-groups"></div>
    </div>
  </div>
</div>

<div id="CR-preload-authoring-___textareaId___" class="CR-answerbox" style="display: none">
  <div class="CR-preload-warning">
    <p><em>NOTE:
      <em>ANY</em> added or edited cards/groups in the preload will reset the answer on save</em>
    </p>
  </div>
  <div class="CR-top-bar">
    <h3>Preload</h3>
    <button class="CR-cardsort-fullscreen-button">Fullscreen</button>
    <button class="CR-add-group-button">Add Group</button>
    <div class="CR-group-order-checkbox-group">
      <label for="ordered">Group Order Matters</label>
      <input id="ordered" type="checkbox" name="ordered"/>
    </div>
    <div class="CR-group-width-input-group">
      <label for="group-width">Group Width</label>
      <input id="group-width" type="number" name="group-width" value="25"/>
    </div>
  </div>
  <div class="CR-content">
    <div class="CR-left-shadow"></div>
    <div class="CR-right-shadow"></div>
    <div class="CR-group-container">
      <div class="CR-visible-groups-box"></div>
      <div class="CR-groups"></div>
    </div>
  </div>
</div>


<script>
  //# sourceURL=Cardsorting.js
  require(['jquery', 'jqueryui'], function ($, jqui) {

    // THANK YOU Alconja
    // https://stackoverflow.com/a/4372419/18307756
    (function ($, undefined) {
      $.widget("ui.fixedSortable", $.ui.sortable, {
        _init: function () {
          this.element.data("sortable", this.element.data("fixedSortable"));
          return $.ui.sortable.prototype._init.apply(this, arguments);
        },
        _create: function () {
          var result = $.ui.sortable.prototype._create.apply(this, arguments);
          this.containerCache.sortable = this;
          return result;
        },
        _intersectsWithPointer: function (item) {
          // console.log(item)
          // console.log(this)
          if (!item.instance.element.hasClass("main-list")) {
            let $main = $(item.instance.element).closest(".CR-groups").children(":first")
            // $main.css("color", "red")
            let top = $main.offset().top;
            let left = $main.offset().left;
            if (
                this.positionAbs.top + this.offset.click.top >= top
                && this.positionAbs.top + this.offset.click.top <= top + $main.height()
                && this.positionAbs.left + this.offset.click.left >= left
                && this.positionAbs.left + this.offset.click.left <= left + $main.width()
            ) {
              return false;
            } else {
              return $.ui.sortable.prototype._intersectsWithPointer.apply(this, arguments);
            }
          } else {
            return $.ui.sortable.prototype._intersectsWithPointer.apply(this, arguments);
          }


//This line....
//                     if (!item.instance.element.hasClass("main-list") && this.positionAbs.top + this.offset.click.top < $(window).scrollTop() + 87) {
//                         return false;
//                     }

        },
        _intersectsWith: function (containerCache) {
          // console.log(containerCache.sortable.element)
          if (!containerCache.sortable.element.hasClass("main-list")) {
            let $main = $(containerCache.sortable.element).closest(".CR-groups").children(":first")
            let top = $main.offset().top;
            let left = $main.offset().left;
            if (
                this.positionAbs.top + this.offset.click.top >= top
                && this.positionAbs.top + this.offset.click.top <= top + $main.height()
                && this.positionAbs.left + this.offset.click.left >= left
                && this.positionAbs.left + this.offset.click.left <= left + $main.width()
            ) {
              return false;
            } else {
              return $.ui.sortable.prototype._intersectsWith.apply(this, arguments);
            }
          } else {
            return $.ui.sortable.prototype._intersectsWith.apply(this, arguments);
          }

//Also this line....
//                     if (!containerCache.sortable.element.hasClass("main-list") && this.positionAbs.top + this.offset.click.top < $(window).scrollTop() + 87) {
//                         return false;
//                     }
          return $.ui.sortable.prototype._intersectsWith.apply(this, arguments);
        }
      });
    })(jQuery);

    function turn_on_touch() {
      // Turn on touch functionality
      // Detect touch support

      /*!
      * jQuery UI Touch Punch 0.2.3
      *
      * Copyright 2011–2014, Dave Furfero
      * Dual licensed under the MIT or GPL Version 2 licenses.
      *
      * Depends:
      *  jquery.ui.widget.js
      *  jquery.ui.mouse.js
      */
      $.support.touch = 'ontouchend' in document;

      // Ignore browsers without touch support
      if (!$.support.touch) {
        return;
      }

      var mouseProto = $.ui.mouse.prototype,
          _mouseInit = mouseProto._mouseInit,
          _mouseDestroy = mouseProto._mouseDestroy,
          touchHandled;

      /**
       * Simulate a mouse event based on a corresponding touch event
       * @param {Object} event A touch event
       * @param {String} simulatedType The corresponding mouse event
       */
      function simulateMouseEvent(event, simulatedType) {

        // Ignore multi-touch events
        if (event.originalEvent.touches.length > 1) {
          return;
        }

        event.preventDefault();

        var touch = event.originalEvent.changedTouches[0],
            simulatedEvent = document.createEvent('MouseEvents');

        // Initialize the simulated mouse event using the touch event's coordinates
        simulatedEvent.initMouseEvent(
            simulatedType,    // type
            true,             // bubbles
            true,             // cancelable
            window,           // view
            1,                // detail
            touch.screenX,    // screenX
            touch.screenY,    // screenY
            touch.clientX,    // clientX
            touch.clientY,    // clientY
            false,            // ctrlKey
            false,            // altKey
            false,            // shiftKey
            false,            // metaKey
            0,                // button
            null              // relatedTarget
        );

        // Dispatch the simulated event to the target element
        event.target.dispatchEvent(simulatedEvent);
      }

      /**
       * Handle the jQuery UI widget's touchstart events
       * @param {Object} event The widget element's touchstart event
       */
      mouseProto._touchStart = function (event) {

        var self = this;

        // Ignore the event if another widget is already being handled
        if (touchHandled || !self._mouseCapture(event.originalEvent.changedTouches[0])) {
          return;
        }

        // Set the flag to prevent other widgets from inheriting the touch event
        touchHandled = true;

        // Track movement to determine if interaction was a click
        self._touchMoved = false;

        // Simulate the mouseover event
        simulateMouseEvent(event, 'mouseover');

        // Simulate the mousemove event
        simulateMouseEvent(event, 'mousemove');

        // Simulate the mousedown event
        simulateMouseEvent(event, 'mousedown');
      };

      /**
       * Handle the jQuery UI widget's touchmove events
       * @param {Object} event The document's touchmove event
       */
      mouseProto._touchMove = function (event) {

        // Ignore event if not handled
        if (!touchHandled) {
          return;
        }

        // Interaction was not a click
        this._touchMoved = true;

        // Simulate the mousemove event
        simulateMouseEvent(event, 'mousemove');
      };

      /**
       * Handle the jQuery UI widget's touchend events
       * @param {Object} event The document's touchend event
       */
      mouseProto._touchEnd = function (event) {

        // Ignore event if not handled
        if (!touchHandled) {
          return;
        }

        // Simulate the mouseup event
        simulateMouseEvent(event, 'mouseup');

        // Simulate the mouseout event
        simulateMouseEvent(event, 'mouseout');

        // If the touch interaction did not move, it should trigger a click
        if (!this._touchMoved) {

          // Simulate the click event
          simulateMouseEvent(event, 'click');
        }

        // Unset the flag to allow other widgets to inherit the touch event
        touchHandled = false;
      };

      /**
       * A duck punch of the $.ui.mouse _mouseInit method to support touch events.
       * This method extends the widget with bound touch event handlers that
       * translate touch events to mouse events and pass them to the widget's
       * original mouse event handling methods.
       */
      mouseProto._mouseInit = function () {

        var self = this;

        // Delegate the touch handlers to the widget's element
        self.element.bind({
          touchstart: $.proxy(self, '_touchStart'),
          touchmove: $.proxy(self, '_touchMove'),
          touchend: $.proxy(self, '_touchEnd')
        });

        // Call the original $.ui.mouse init method
        _mouseInit.call(self);
      };

      /**
       * Remove the touch event handlers
       */
      mouseProto._mouseDestroy = function () {

        var self = this;

        // Delegate the touch handlers to the widget's element
        self.element.unbind({
          touchstart: $.proxy(self, '_touchStart'),
          touchmove: $.proxy(self, '_touchMove'),
          touchend: $.proxy(self, '_touchEnd')
        });

        // Call the original $.ui.mouse destroy method
        _mouseDestroy.call(self);
      };
    }

    turn_on_touch(); // Run the jquery ui touch code.


    // A global mapping between answerbox IDs and the CardSort widgets
    if (!window.CRidWidgetMap) {
      window.CRidWidgetMap = {};
      window.onresize = () => {
        Object.values(window.CRidWidgetMap).forEach(val => val.refreshUI());
      }
    }

    $.valHooks["div"] = {
      get: function (elt) {
        const $elt = $(elt);
        const widget = window.CRidWidgetMap[$elt.attr('id')];
        if (widget) {
          return widget.asJSON();
        } else {
          console.log("Called val on unrecognised div")
          return {}
        }
      }
    }
    $.valHooks["pre"] = {
      get: function (elt) {
        return $(elt).text()
      }
    }
    $.valHooks["h4"] = {
      get: function (elt) {
        return $(elt).text()
      }
    }
    $.valHooks["p"] = {
      get: function (elt) {
        return $(elt).text()
      }
    }

    /** Parses JSON to an object or returns an empty object if the string is not valid JSON */
    function parseJSON(aString) {
      try {
        return JSON.parse(aString)
      } catch (SyntaxError) {
        return {}
      }
    }

    const CardSort = function () {
      this.$preloadAnswerbox = $(document.getElementById("CR-preload-authoring-___textareaId___"));
      this.$answerAnswerbox = $(document.getElementById("CR-answer-authoring-___textareaId___"));
      this.$studentAnswerbox = $(document.getElementById("CR-student-answer-___textareaId___"));

      this.$answerbox = this.activeAnswerbox();
    }

    CardSort.prototype.init = function () {
      this.$answerbox.css("display", "flex");  // show the active answer
      this.setupHooks();
      this.setupFullscreenButton();

      this.load();

      this.fitCards();
      this.setupResetButton();
      this.setupAddGroupButton();
      this.setupScrollShadow();

      $(".CR-groups > .CR-group:first-child .CR-group-card-container", this.$answerbox)
          .addClass("main-list")

      this.makeSortable();
      this.setupDeleteCardButton();

      this.refreshUI();
    }

    CardSort.prototype.refreshUI = function () {
      this.setupInputs();
      this.setupDeleteGroupButton();
      this.setupAddCardButton();
      this.setupAddGroupButton();
      this.makeSortable();
      this.setupDeleteCardButton();
      this.fitCards();
      this.disableGrammarly();
      this.setTextAreaHeight();
      this.setupPreformatCheckbox();


      // Some changes take a second to update the window fully
      setTimeout(() => {
        // resets scroll shadow on change
        $(".CR-group-container", this.$answerbox).trigger("scroll");

        // Stops weird behaviour with the index (top left) gaining focus??? mostly???
        this.$answerbox
            .off("click")
            .on("click", function (e) {
              e.stopPropagation();
              e.preventDefault();
            })
      }, 150);
    }

    CardSort.prototype.makeSortable = function () {
      // Coderunner IDs break normal selectors
      let container = `*[id="${this.$answerbox.attr('id')}"] .CR-group-card-container`
      $(".CR-group-card-container", this.$answerbox)
          .fixedSortable({connectWith: container, cursor: "grabbing", tolerance: "pointer"});
      $(".CR-group-card-container", this.$answerbox)
          .disableSelection();
    }

    /** Adds name + coderunner-ui class to active answerbox + registers the
     * active answerbox's ID in the global id to widget map */
    CardSort.prototype.setupHooks = function () {
      this.$answerbox.addClass("coderunner-ui-element");
      this.$answerbox.attr("name", "cardsort");
      window.CRidWidgetMap[this.$answerbox.attr("id")] = this;
    }

    CardSort.prototype.load = function () {
      let data;
      if (this.isPreload()) {
        data = this.preloadJSON();
      } else {
        let preload = this.preloadJSON();
        data = this.isStudentAnswer() ? this.studentAnswerJSON() : this.answerAuthoringJSON();
        let preloadGroups = preload["groups"].map(it => it["title"]).sort();
        let dataGroups = data["groups"].map(it => it["title"]).sort();
        let groupsAreSame = preloadGroups.toString() === dataGroups.toString();

        let preloadCards = preload["groups"].flatMap(it => it["cards"]).map(it => JSON.stringify(it)).sort();
        let dataCards = data["groups"].flatMap(it => it["cards"]).map(it => JSON.stringify(it)).sort();
        let cardsAreSame = preloadCards.toString() === dataCards.toString();

        // TODO – Handle this better
        data = groupsAreSame && cardsAreSame ? data : preload;
      }
      for (const group of data["groups"]) {
        $(".CR-groups", this.$answerbox)
            .append(this.groupFromJSON(group));
      }

      let config = data["config"];
      $(".CR-group-order-checkbox-group :checkbox", this.$answerbox)
          .prop("checked", config["groupOrder"])

      $(".CR-group-width-input-group input", this.$answerbox)
          .val(config["groupWidth"])

      this.refreshUI();
    }

    CardSort.prototype.preloadJSON = function () {
      if (this.isStudentAnswer()) {
        // textareaid macro is prefixed with "id_" however reset button id does not include this prefix
        const buttonID = "___textareaId___".slice(3, -7) + "_-resetbutton";
        const btnElement = $(document.getElementById(buttonID));
        return parseJSON($(btnElement).attr('data-reload-text'))["cardsort"][0];
      } else {
        return parseJSON($(document.getElementById("id_answerpreload")).text())["cardsort"][0];
      }
    }

    CardSort.prototype.answerAuthoringJSON = function () {
      if (!this.isStudentAnswer()) {
        return parseJSON($(document.getElementById("id_answer")).text())["cardsort"][0];
      } else {
        return {}
      }
    }

    CardSort.prototype.studentAnswerJSON = function () {
      if (this.isStudentAnswer()) {
        return parseJSON($(document.getElementById("___textareaId___")).text())["cardsort"][0];
      } else {
        return {};
      }
    }

    /**
     * @returns {boolean} true if the current window is an answer preload
     */
    CardSort.prototype.isPreload = function () {
      // Don't know why this works – inspiration taken from Parsons example
      return this.$studentAnswerbox.closest(".preloadanswer").length > 0;
    };

    /**
     * @returns {boolean} true if the current window is the student answer
     */
    CardSort.prototype.isStudentAnswer = function () {
      // Don't know why this works – inspiration taken from Parsons example
      return this.$studentAnswerbox.closest(".que").length > 0;
    };

    /**
     * @returns {boolean} true is the current window is the answer authoring window
     */
    CardSort.prototype.isAnswerAuthoring = function () {
      return !this.isPreload() && !this.isStudentAnswer();
    };

    /**
     * @returns {jQuery} the root div of the active answer
     */
    CardSort.prototype.activeAnswerbox = function () {
      if (this.isPreload()) {
        return this.$preloadAnswerbox;
      } else if (this.isStudentAnswer()) {
        return this.$studentAnswerbox;
      } else {
        return this.$answerAnswerbox;
      }
    }

    CardSort.prototype.setupDeleteGroupButton = function () {
      let refresh = () => this.refreshUI();
      $(".CR-group .CR-delete-group", this.$answerbox)
          .off("click")
          .on("click", function () {
            let $group = $(this).closest(".CR-group");
            if ($(".CR-group-card-container > *", $group).length === 0) {
              $group.remove();
            } else {
              alert("Cannot delete non-empty group");
            }
            refresh();
            return false;
          })
    }

    CardSort.prototype.setupAddCardButton = function () {
      let refresh = () => this.refreshUI();
      let emptyCard = () => this.emptyCard();
      $(".CR-group .CR-add-card", this.$answerbox)
          .off("click")
          .on("click", function () {
            let $cardContainer = $(".CR-group-card-container", $(this).closest(".CR-group"));
            $cardContainer.append(emptyCard());
            refresh();
            return false;
          });
    }

    CardSort.prototype.setupDeleteCardButton = function () {
      let refresh = () => this.refreshUI();
      $(".CR-delete-card-button", this.$answerbox)
          .off("click")
          .on("click", function () {
            $(this).closest(".CR-card").remove();
            refresh();
            return false;
          });
    }

    /** Sets up the fullscreen button for the active answerbox */
    CardSort.prototype.setupFullscreenButton = function () {
      let refresh = () => this.refreshUI();
      $(".CR-cardsort-fullscreen-button", this.$answerbox)
          .on("click", function () {
            if (document.fullscreenElement) {
              if (document.exitFullscreen) {
                document.exitFullscreen();
              } else if (document.webkitExitFullscreen) {
                document.webkitExitFullscreen();
              }
            } else {
              const element = $(this).closest(".CR-answerbox")[0]
              if (element.requestFullscreen) {
                element.requestFullscreen();
              } else if (element.webkitRequestFullscreen) {
                element.webkitRequestFullscreen();
              }
            }
            refresh();
            return false;
          })
    }

    CardSort.prototype.setupResetButton = function () {
      // textareaid macro is prefixed with "id_" however reset button id does not include this prefix
      const buttonID = "___textareaId___".slice(3, -7) + "_-resetbutton";
      const btnElement = $(document.getElementById(buttonID));
      let refresh = () => this.refreshUI();
      $(btnElement).on('click', function () {
        const answer = document.getElementById('___textareaId___');
        $(answer).text($(this).attr('data-reload-text'));
        refresh();
        return false;
      })
    }

    CardSort.prototype.setupAddGroupButton = function () {
      // Todo – when dynamically selecting open vs closed sorts change this
      if (!this.isPreload()) {
        $(".CR-add-group-button", this.$answerbox)
            .remove();
        return;
      }

      let $groups = $(".CR-groups", this.$answerbox)
      let refresh = () => this.refreshUI();
      let emptyGroup = () => this.emptyGroup();
      $(".CR-add-group-button", this.$answerbox)
          .off("click")
          .on("click", function () {
            $groups.append(emptyGroup());
            refresh();
            return false;
          })
    }

    CardSort.prototype.setupPreformatCheckbox = function () {
      let refresh = () => this.refreshUI();
      $(".CR-preformat-checkbox-group :checkbox, .CR-group-order-checkbox-group :checkbox", this.$answerbox)
          .off("click")
          .on("click", function (e) {
            refresh();
            e.stopPropagation();
          });  // for some reason this is needed for checkboxes to work.
    }

    CardSort.prototype.setupScrollShadow = function () {
      let $leftShadow = $(".CR-left-shadow", this.$answerbox);
      let $rightShadow = $(".CR-right-shadow", this.$answerbox);

      let $groupsArea = $(".CR-visible-groups-box", this.$answerbox);
      let $content = $(".CR-content", this.$answerbox)

      $(".CR-group-container", this.$answerbox)
          .off("scroll")
          .on("scroll", function () {
            let horizontalOffset = $content.width() - $groupsArea.width()
            let verticalOffset = $content.height() - $groupsArea.height()

            let maxScrollLeft = this.scrollWidth - this.clientWidth;
            let leftShadowSize = Math.min(30, $(this).scrollLeft());
            let rightShadowSize = -Math.min(30, maxScrollLeft - $(this).scrollLeft());
            $leftShadow
                .css("box-shadow", `inset ${leftShadowSize}px 0 30px -30px rgba(0, 0, 0, 0.6)`)
                .css("bottom", `${verticalOffset}px`);
            $rightShadow
                .css("box-shadow", `inset ${rightShadowSize}px 0 30px -30px rgba(0, 0, 0, 0.6)`)
                .css("right", `${horizontalOffset}px`)
                .css("bottom", `${verticalOffset}px`);
          })
          .trigger("scroll");
    }

    CardSort.prototype.setupInputs = function () {
      let setHeight = () => this.setTextAreaHeight();
      let setWidth = () => this.fitCards();
      $("textarea", this.$answerbox)
          .off("input click")
          .on("input click", function () {
            setWidth();
            setHeight();
            return false;
          });

      $("input", this.$answerbox)
          .off("click")
          .on("click", function () {
            setWidth();
            setHeight();
            return false;
          });
    }

    CardSort.prototype.fitCards = function () {
      let width = Math.max(
          ...(this.cardJSON()
              .filter(card => card["preformatted"])
              .map(card => card["prompt"])
              .flatMap(text => text.split(/\r?\n/))
              .map(line => line.length))
      );
      width = Math.max(this.configJSON()["groupWidth"], width + 5);
      $(".CR-group", this.$answerbox)
          .css("width", `${width}ch`);
      $(".CR-left-shadow", this.$answerbox)
          .css("left", `${width}ch`);
    }

    CardSort.prototype.setTextAreaHeight = function () {
      $(".CR-group-card-container textarea", this.$answerbox)
          .each(function () {
            if (this.clientHeight !== this.scrollHeight) {
              $(this).height(`${this.scrollHeight}px`);
            }
          })
    }

    CardSort.prototype.cardJSON = function () {
      return $(".CR-group .CR-card", this.$answerbox).map((i, c) => this.cardToJSON(c)).get()
    }

    CardSort.prototype.configJSON = function () {
      if (this.isPreload()) {
        return {
          "groupOrder": $(".CR-group-order-checkbox-group :checkbox", this.$answerbox).prop("checked"),
          "groupWidth": $(".CR-group-width-input-group input", this.$answerbox).val(),
        };
      } else {
        return {
          "groupOrder": this.preloadJSON()["config"]["groupOrder"],
          "groupWidth": this.preloadJSON()["config"]["groupWidth"],
        };
      }
    }

    /** Returns this card sort as a JSON object */
    CardSort.prototype.asJSON = function () {
      return {
        "groups": $(".CR-group", this.$answerbox)
            .map((i, e) => this.groupToJSON(e)).get(),
        "config": this.configJSON(),
      };
    }

    CardSort.prototype.groupFromJSON = function (groupJSON) {
      let $group = $(`<div class="CR-group"></div>`);
      let $headerBar = $(`<div class="CR-group-header-bar"></div>`);
      let $cardContainer = $(`<div class="CR-group-card-container"></div>`);
      $group.append($headerBar);
      $group.append($cardContainer);

      if (this.isPreload()) {
        $headerBar.append(`<input class="CR-group-title" value="${groupJSON["title"]}"/>`);
        $headerBar.append(`<button class="CR-add-card">Add Card</button>`);
        $headerBar.append(`<button class="CR-delete-group">Delete</button>`);
      } else {
        $headerBar.append(`<h4 class="CR-group-title">${groupJSON["title"]}</h4>`);
      }

      let cards = groupJSON["cards"];
      for (const card of cards) {
        $cardContainer.append(this.cardFromJSON(card));
      }

      return $group;
    }

    CardSort.prototype.groupToJSON = function (group) {
      return {
        "title": $(".CR-group-title", group).val(),
        "cards": $(".CR-group-card-container .CR-card", group)
            .map((i, e) => this.cardToJSON(e)).get(),
      }
    }

    CardSort.prototype.emptyGroup = function () {
      return this.groupFromJSON({"title": "", "cards": []})
    }

    CardSort.prototype.cardFromJSON = function (cardJSON) {
      let $card = $(`<div class="CR-card"></div>`);
      if (this.isPreload()) {
        $card.append(`<textarea class="CR-prompt">${cardJSON["prompt"]}</textarea>`);
        let $cardButtons = $(`
                    <div class="CR-card-buttons">
                      <button class="CR-delete-card-button">Delete Card</button>
                      <div class="CR-preformat-checkbox-group">
                        <label>Preformatted</label>
                        <input name="preformat" type="checkbox"/>
                      </div>
                    </div>
                `);
        let $formatOption = $("input", $cardButtons);
        $formatOption.prop("checked", cardJSON["preformatted"]);
        $card.append($cardButtons);
      } else {
        $card.append(cardJSON["preformatted"]
            ? `<pre class="CR-prompt">${cardJSON["prompt"]}</pre>`
            : `<p class="CR-prompt">${cardJSON["prompt"]}</p>`
        )
      }
      return $card;
    }

    CardSort.prototype.cardIsPreformatted = function (card) {
      return $(".CR-preformat-checkbox-group :checkbox", card).prop("checked")
          || $(".CR-prompt", card).is("pre");
    }

    CardSort.prototype.cardToJSON = function (card) {
      return {
        "prompt": $(".CR-prompt", card).val() || "",
        "preformatted": this.cardIsPreformatted(card),
      };
    }

    CardSort.prototype.emptyCard = function () {
      return this.cardFromJSON({"prompt": "", "preformatted": true});
    }

    CardSort.prototype.disableGrammarly = function () {
      $("textarea", this.$answerbox).attr("data-gramm", false);
    }

    function setup() {
      const cardSort = new CardSort();
      cardSort.init();
    }

    $(document).ready(setup);

  });
</script>

</body>
</html>
]]></prototypeextra>
    <testcases>
<file name="munkres.py" path="/" encoding="base64"></file>
    </testcases>
  </question>

</quiz>